import tensorflow as td
from tensorflow import keras
import numpy as np

########
# https://github.com/tensorflow/tensorflow/issues/33285
import requests
requests.packages.urllib3.disable_warnings()
import ssl

try:
    _create_unverified_https_context = ssl._create_unverified_context
except AttributeError:
    # Legacy Python that doesn't verify HTTPS certificates by default
    pass
else:
    # Handle target environment that doesn't support HTTPS verification
    ssl._create_default_https_context = _create_unverified_https_context
########


data = keras.datasets.imdb
# Again formatted really nicely
# 88000 is taking the 88000 most common words. Don't want 'fastidious' if it's counted once
(train_data, train_labels), (test_data, test_labels) = data.load_data(num_words=88000)

# We usually have to make our own word index where each word has a number
word_index = data.get_word_index()

# Creating a bit of room at the start of the relation dictionary
word_index = {k:(v+3) for k,v in word_index.items()}
# For these:
	# PAD is to fill out a review that isn't long enough (because we need all with 250 words)
word_index["<PAD>"] = 0
word_index["<START>"] = 1
	# Unknown character
word_index["<UKN>"] = 2
word_index["<UNUSED>"] = 3

# Tensorflow needs the integer pointing to the word, not the word to pointer
# so flip
reverse_word_index = dict([(value, key) for (key, value) in word_index.items()])


# Now we can preprocess the data to make them all the same length
# As in add the padding after the review = 'post'
train_data = keras.preprocessing.sequence.pad_sequences(train_data, value=word_index["<PAD>"], padding="post", maxlen=250)
test_data = keras.preprocessing.sequence.pad_sequences(test_data, value=word_index["<PAD>"], padding="post", maxlen=250)

print(train_data)

def decode_review(text):
	# Convert the list of numbers into a string using the rever_word_index dictionary
	return " ".join([reverse_word_index.get(i, "?") for i in text])



model = keras.Sequential()
# Functionally the same as adding layers in a list inside ^^^

	# Initially create 88000 word vectors, one for each word
	# Scattered in whatever dimensional space (this case 16) randomly
	# Then, we look at the context they're used in and try to 
	# group together similar words e.g. GOOD and GREAT
	# which are in reality 25 and 399 or something
	# Then, we can pass in these condensed word groups as the data
	# for the next layers.
model.add(keras.layers.Embedding(88000,16)) 
	# Takes the average of all 16 dimensions and condenses into 1. 
	# So takes all 250 words and turns each into 1 number 
model.add(keras.layers.GlobalAveragePooling1D())
model.add(keras.layers.Dense(16, activation="relu"))
# Bad or good [0,1]
model.add(keras.layers.Dense(1, activation="sigmoid"))


model.summary()

# binary_crossentropy calculates loss well for [0,1] from sigmoid
model.compile(optimizer="adam", loss="binary_crossentropy", metrics=["accuracy"])

# We already have test data, but we'll have a second set
x_val = train_data[:10000]
x_train = train_data[10000:]

y_val = train_labels[:10000]
y_train = train_labels[10000:]

print(x_train)


# Need small batch size because lots of data (?)
fitModel = model.fit(x_train, y_train, epochs=40, batch_size=512, validation_data=(x_val, y_val), verbose=1)

results = model.evaluate(test_data, test_labels)
print(results)

# This saves the model
# model.save("model.h5")

'''
# Now you can open that shit up with 
model = keras.models.load_model("model.h5") 
# and then use it as normal.

def encode_review(string):
	# Starting with the <START> tag
	encoded_list = [1]
	for word in string:
		# If we know the word
		if word.lower() in word_index:
			# Lower the word mayn
			encoded_list.append(word_index[word.lower()])
		else:
			# <UKN>
			encoded_list.append(2)

	return encoded_list

# To test an individual review:
with open("review1.txt") as f:
	# For each review
	for line in f.readlines():
		# Since it's split at spacebar, "movie." is a different word to "movie", so get rid.
		# Strip newline character
		# Split at space bar
		nline = line.replace(",","").replace("(","").replace(")","").replace(".","").replace(":","").replace("\"","").strip().split(" ")
		# Encode characters as numbers
		encode = encode_review(nline)
		# Pad or remove extra characters. Needs a list of lists.
		encode = keras.preprocessing.sequence.pad_sequences([encode], value=word_index["<PAD>"], padding="post", maxlen=250)

		predict = model.predict(encode)
		print(line)
		print(encode)
		print(predict[0])
'''
